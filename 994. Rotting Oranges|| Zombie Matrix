class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid.length == 0 || grid[0].length == 0){
            return -1;
        }
        int m = grid.length ;
        int n = grid[0].length ;
        int target = m*n;
        int rottenOranges = 0;
        Queue<int[]> queue = new LinkedList<>();
        for(int i = 0; i < grid.length ; i++){
            for(int j = 0; j < grid[0].length ; j++){
                if(grid[i][j] == 0){
                    target--;
                }else if(grid[i][j] == 2){
                    rottenOranges++;
                    queue.offer(new int []{i, j});
                    
                }
            }
        }
        // System.out.println("target-> " + target+ " rottenOranges-> "+ rottenOranges);
        int mins = 0;
        int[] rowOffSet = {1, 0, -1, 0};
        int[] colOffSet = {0, 1, 0, -1};
        while(!queue.isEmpty()){
            int size = queue.size();
            
            if(rottenOranges == target){
                return mins;
            }
           for(int i = 0 ; i < size; i++){
               int [] curr = queue.poll();
               for(int k = 0; k < 4; k++){
                   int newRow = curr[0]+rowOffSet[k];
                   int newCol = curr[1]+colOffSet[k];
                   if(newRow < 0 || newRow >= m || newCol< 0 || newCol>= n || grid[newRow][newCol] == 2 || grid[newRow][newCol] == 0 ){
                       continue;
                   }
                   rottenOranges++;
                   
                   queue.offer(new int []{newRow, newCol});
                   grid[newRow][newCol] = 2;
               }
               
            }
            
               mins++;
           }
            
            
        
        return target == 0 ? 0 :-1;
    }
}
