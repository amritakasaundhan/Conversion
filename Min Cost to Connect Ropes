This question is more like a greedy algorithm using min-heap. The min cost in each time is to connect the shortest two ropes into one and put this one to a auto-sort queue. If you can figure that out, it will be very clear that using a priority queue in java can solve it easily.


class Solution {
    public int connectSticks(int[] sticks) {
        if(sticks.length == 0 || sticks == null){
            return 0;
        }
        // if(sticks.length == 1){
        //     return sticks[0];
        // }
        PriorityQueue<Integer> q = new PriorityQueue<>();
        for(int i = 0 ; i < sticks.length; i++){
            q.add(sticks[i]);
        }
        int cost = 0;
        while(q.size()>1){
            int rope1 = q.poll();
            int rope2 = q.poll();
            int rope_new = rope1 + rope2;
            cost += rope_new;
            q.add(rope_new);
        }
        return cost;
    }
}
