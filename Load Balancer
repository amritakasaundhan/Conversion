left_index initially points to the second value from the left.
right_index initially points to the second value from the right.
The values at those indexes will be dropped.
We need to keep track of the following sums:

total_sum is the total sum of all values in the input.
left_sum is the sum of all values with an index < left_index.
right_sum is the sum of all values with an index > right_index.
drop_sum is the sum of the values at left_index and right_index.
mid_sum is obtained by subtracting left_sum, right_sum and drop_sum from the total_sum.
Balancing is possible if left_sum == mid_sum == right_sum.
At every step we move the left_index to the right if the left_sum is smaller or equal to the right_sum.
Otherwise we move the right_index to the left.

Time o<n>
space 0<1>


public static void main(String[] args) {
	int[] nums1 = {1, 3, 4, 2, 2, 2, 1, 1, 2}, nums2 = {1,1,1,1,1,1};
	System.out.println(solve(nums1));
	System.out.println(solve(nums2));
}

private static boolean solve(int[] nums) {
	int sum = 0;
	for(int n : nums)
		sum += n;
	int l = 0, r = nums.length - 1, sumL = nums[l], sumR = nums[r];
	while(l < r) {
		if(sumL == sumR) {
			if(sumL == sum - sumL*2 - nums[l + 1] - nums[r - 1] && r - l > 1)
				return true;
			else {
				l++;
				r--;
				sumL += nums[l];
				sumR += nums[r];
			}
		}else if(sumL > sumR) {
			r--;
			sumR += nums[r];
		}else {
			l++;
			sumL += nums[l];
		}
	}
	return false;
}



